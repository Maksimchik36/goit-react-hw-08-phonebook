{"version":3,"file":"static/js/703.6f8b06df.chunk.js","mappings":"+PAEaA,EAAOC,EAAAA,EAAAA,GAAH,gIAQJC,EAASD,EAAAA,EAAAA,OAAH,oL,oBCSnB,EAdoB,SAAC,GAAwB,IAAvBE,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,OAEhC,GAAuDC,EAAAA,EAAAA,MAAvD,eAAOC,EAAP,KAAuCC,EAAvC,KAA4BC,UAG1B,OACI,UAACT,EAAD,WAAOI,EAAP,KAAeC,GACf,SAACH,EAAD,CAAQQ,QAAS,WAAQH,EAAkBJ,IAAKQ,EAAAA,EAAAA,IAAY,gCAChE,EAAEC,SAAWJ,EADT,SACwBA,EAAa,cAAgB,aAG1D,ECdYK,EAASZ,EAAAA,EAAAA,GAAH,8CCWnB,EAVoB,SAAC,GAAkB,IAAhBa,EAAe,EAAfA,SAErB,OACE,SAACD,EAAD,UACKC,EAASC,KAAI,SAAAC,GAAO,OAAI,SAAC,GAAD,UAAkCA,GAAhBA,EAAQb,GAA9B,KAG5B,E,mBCRYc,EAAYhB,EAAAA,EAAAA,IAAH,8LASTiB,EAAQjB,EAAAA,EAAAA,MAAH,iEAKLkB,EAAQlB,EAAAA,EAAAA,MAAH,iECKlB,EAjBqB,WAEnB,IAAMmB,GAAWC,EAAAA,EAAAA,MASf,OAAO,SAACJ,EAAD,WAAY,UAACC,EAAD,mCACjB,SAACC,EAAD,CAAOG,KAAK,OAAOC,SAPD,SAACC,GAEvBJ,GAASK,EAAAA,EAAAA,IAAUD,EAAME,OAAOC,OAC/B,QAMF,EChBYV,EAAYhB,EAAAA,EAAAA,IAAH,0GCqCtB,EA/BqB,WAAO,IAAD,EAEzB,GAAqC2B,EAAAA,EAAAA,MAA7BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,WAAYC,EAA1B,EAA0BA,OAGpBC,GAAYC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOR,KAAjB,IAG7BS,EAAgB,iBAAGP,QAAH,IAAGA,OAAH,EAAGA,EAAMM,QAAO,SAAAE,GAAG,OAAIA,EAAIjC,KAAKkC,cAAcC,SAASP,EAApC,WAAnB,QAAsE,GAa3F,MAVc,cAAXD,GAA0C,IAAhBF,EAAKW,QAA4C,IAA5BJ,EAAiBI,SAClEC,EAAAA,EAAAA,IAAS,mCAII,cAAXV,GAA0C,IAAhBF,EAAKW,QAA4C,IAA5BJ,EAAiBI,SAClEC,EAAAA,EAAAA,IAAS,mCAIH,UAAC,EAAD,WACFX,IAAc,SAACY,EAAA,EAAD,KAEf,SAAC,EAAD,IAEY,cAAXX,GAA0BF,IAAQ,SAAC,EAAD,CAAaf,SAAUsB,MAEhE,C","sources":["components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/FilterByName/FilterByName.styled.jsx","components/FilterByName/FilterByName.jsx","pages/ContactsPage/ContactsPage.styled.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Item = styled.li`\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nmargin-bottom: 10px;\nfont-size: 20px;\n`;\n\nexport const Button = styled.button`\nmargin-left: 10px;\npadding: 5px;\nborder-radius: 4px;\nborder-color: #747274;\nfont-weight: 600;\ncursor: pointer;\n&:hover {\nbackground-color: #f32b2b;\n`;","import { useDeleteContactMutation } from \"redux/userApi\";\nimport { Item, Button } from './ContactItem.styled';\nimport { showSuccess } from \"components/ToastMessages/ToastMessages\";\n\n// из распыленного contact в ContactsList деструктуризируем след-щие параметры:\nconst ContactItem = ({id, name, number}) => {\n// ф-я возвращает ф-ю и статусы выполнения\nconst [deleteContactFunc, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n  \n  return (\n      <Item>{name}: {number}\n      <Button onClick={() => { deleteContactFunc(id); showSuccess(\"Contact successfully deleted.\")\n }} disabled={ isDeleting } >{isDeleting ? 'Deleting...' : 'Delete'}</Button>\n      </Item>\n  )\n}\n\n\nexport default ContactItem;","import styled from '@emotion/styled';\n\nexport const ListSt = styled.ul`\nmargin-bottom: 10px;\n`;","import ContactItem from 'components/ContactItem';\nimport { ListSt } from './ContactList.styled';\n\nconst ContactList = ({ contacts }) => {\n  \n  return (\n    <ListSt>        \n        {contacts.map(contact=> (<ContactItem key={contact.id} {...contact}></ContactItem>))}\n    </ListSt>\n  )\n}\n\n\nexport default ContactList;","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\npadding: 10px;\ntext-align: center;\nborder: 2px solid grey;\nborder-radius: 8px;\nmax-width: 400px;\nbackground-image: linear-gradient(to right, #DECBA4, #3E5151);\n`;\n\nexport const Label = styled.label`\nmargin-bottom: 20px;\nfont-weight: 700;\n`;\n\nexport const Input = styled.input`\nmargin-left: 10px;\nborder-radius: 6px;\n`;","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { Container, Input, Label } from './FilterByName.styled';\n\nconst FilterByName = () => {\n  // получает ссылку на функцию для отправки действий\n  const dispatch = useDispatch();\n\n  // записывает в filter(store) вводимые в input(FilterByName) данные \n   const handleFilter = (event) => {  \n  // отправляет action setFilter со значением value\n  dispatch(setFilter(event.target.value))\n  };\n\n\n    return(<Container ><Label>Find contact by Name\n      <Input type=\"text\" onChange={handleFilter} />\n    </Label></Container>)\n}\n\n\nexport default FilterByName;","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\npadding-top: 10%;\n`;","import { useSelector } from \"react-redux\";\nimport ContactList from \"components/ContactList\";\nimport { useAllContactsQuery } from \"redux/userApi\";\nimport Loader from \"components/Loader\";\nimport FilterByName from \"components/FilterByName\";\nimport { Container } from \"./ContactsPage.styled\";\nimport { showInfo } from \"components/ToastMessages/ToastMessages\";\n\nconst ContactsPage = () => {\n    // ф-я возвращает данные и статусы выполнения\n  const { data, isFetching, status } = useAllContactsQuery();\n\n    // читает данные из state.filter(store) и подписывается на их обновление\n  const inputData = useSelector(state => state.filter.value)\n   \n    // выдает отфильтрованные контакты (если есть data - обрабатывает, а если нет - [])\n  const filteredContacts = data?.filter(obj => obj.name.toLowerCase().includes(inputData)) ?? [];\n  \n  // проверяет по завершению запроса наличие данных и запроса фильтрации и выдает сообщение об ошибке, если нет результатов, удовлетворяющих запросу фильтрации\n  if (status === \"fulfilled\" && data.length !== 0 && filteredContacts.length === 0) {\n    showInfo(\"No contact matches the request.\")\n  }\n\n  // проверяет по завершению запроса наличие данных и запроса фильтрации и выдает сообщение об ошибке, если нет данных с бэкэнда\n  if (status === \"fulfilled\" && data.length === 0 && filteredContacts.length === 0) {\n    showInfo(\"No contacts in your phonebook.\")\n  }\n\n    \n   return <Container>\n       {isFetching && <Loader />}\n       \n       <FilterByName></FilterByName>\n       \n       {status === \"fulfilled\" && data && <ContactList contacts={filteredContacts} />}\n   </Container>\n}\n\n\nexport default ContactsPage;"],"names":["Item","styled","Button","id","name","number","useDeleteContactMutation","deleteContactFunc","isDeleting","isLoading","onClick","showSuccess","disabled","ListSt","contacts","map","contact","Container","Label","Input","dispatch","useDispatch","type","onChange","event","setFilter","target","value","useAllContactsQuery","data","isFetching","status","inputData","useSelector","state","filter","filteredContacts","obj","toLowerCase","includes","length","showInfo","Loader"],"sourceRoot":""}